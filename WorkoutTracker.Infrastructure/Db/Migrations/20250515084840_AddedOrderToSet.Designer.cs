// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WorkoutTracker.Infrastructure.Db;

#nullable disable

namespace WorkoutTracker.Infrastructure.Db.Migrations
{
    [DbContext(typeof(WorkoutTrackerDbContext))]
    [Migration("20250515084840_AddedOrderToSet")]
    partial class AddedOrderToSet
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pgcrypto");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WorkoutTracker.Domain.Entities.EquipmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_updated");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_equipment");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_equipment_user_id");

                    b.ToTable("equipment", (string)null);
                });

            modelBuilder.Entity("WorkoutTracker.Domain.Entities.ExerciseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_updated");

                    b.Property<Guid?>("EquipmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("equipment_id");

                    b.Property<int>("ExerciseType")
                        .HasColumnType("integer")
                        .HasColumnName("exercise_type");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("MuscleGroup")
                        .HasColumnType("integer")
                        .HasColumnName("muscle_group");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_exercise");

                    b.HasIndex("EquipmentId")
                        .HasDatabaseName("ix_exercise_equipment_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_exercise_user_id");

                    b.ToTable("exercise", (string)null);
                });

            modelBuilder.Entity("WorkoutTracker.Domain.Entities.RoutineEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_updated");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_routine");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_routine_user_id");

                    b.ToTable("routine", (string)null);
                });

            modelBuilder.Entity("WorkoutTracker.Domain.Entities.RoutineExerciseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_updated");

                    b.Property<Guid?>("ExerciseId")
                        .HasColumnType("uuid")
                        .HasColumnName("exercise_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<Guid>("RoutineId")
                        .HasColumnType("uuid")
                        .HasColumnName("routine_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_routine_exercise");

                    b.HasIndex("ExerciseId")
                        .HasDatabaseName("ix_routine_exercise_exercise_id");

                    b.HasIndex("RoutineId")
                        .HasDatabaseName("ix_routine_exercise_routine_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_routine_exercise_user_id");

                    b.ToTable("routine_exercise", (string)null);
                });

            modelBuilder.Entity("WorkoutTracker.Domain.Entities.SetEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_updated");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("interval")
                        .HasColumnName("duration");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<int>("Reps")
                        .HasColumnType("integer")
                        .HasColumnName("reps");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<float>("Weight")
                        .HasColumnType("real")
                        .HasColumnName("weight");

                    b.Property<Guid>("WorkoutSessionExerciseId")
                        .HasColumnType("uuid")
                        .HasColumnName("workout_session_exercise_id");

                    b.HasKey("Id")
                        .HasName("pk_set");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_set_user_id");

                    b.HasIndex("WorkoutSessionExerciseId")
                        .HasDatabaseName("ix_set_workout_session_exercise_id");

                    b.ToTable("set", (string)null);
                });

            modelBuilder.Entity("WorkoutTracker.Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_updated");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("is_admin");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("WorkoutTracker.Domain.Entities.WorkoutSessionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_updated");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval")
                        .HasColumnName("duration");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("Mood")
                        .HasColumnType("integer")
                        .HasColumnName("mood");

                    b.Property<Guid>("RoutineId")
                        .HasColumnType("uuid")
                        .HasColumnName("routine_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("WorkoutDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("workout_date");

                    b.HasKey("Id")
                        .HasName("pk_workout_session");

                    b.HasIndex("RoutineId")
                        .HasDatabaseName("ix_workout_session_routine_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_workout_session_user_id");

                    b.ToTable("workout_session", (string)null);
                });

            modelBuilder.Entity("WorkoutTracker.Domain.Entities.WorkoutSessionExerciseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_updated");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uuid")
                        .HasColumnName("exercise_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("WorkoutSessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("workout_session_id");

                    b.HasKey("Id")
                        .HasName("pk_workout_session_exercise");

                    b.HasIndex("ExerciseId")
                        .HasDatabaseName("ix_workout_session_exercise_exercise_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_workout_session_exercise_user_id");

                    b.HasIndex("WorkoutSessionId")
                        .HasDatabaseName("ix_workout_session_exercise_workout_session_id");

                    b.ToTable("workout_session_exercise", (string)null);
                });

            modelBuilder.Entity("WorkoutTracker.Domain.Entities.EquipmentEntity", b =>
                {
                    b.HasOne("WorkoutTracker.Domain.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_equipment_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkoutTracker.Domain.Entities.ExerciseEntity", b =>
                {
                    b.HasOne("WorkoutTracker.Domain.Entities.EquipmentEntity", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .HasConstraintName("fk_exercise_equipment_equipment_id");

                    b.HasOne("WorkoutTracker.Domain.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exercise_users_user_id");

                    b.Navigation("Equipment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkoutTracker.Domain.Entities.RoutineEntity", b =>
                {
                    b.HasOne("WorkoutTracker.Domain.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_routine_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkoutTracker.Domain.Entities.RoutineExerciseEntity", b =>
                {
                    b.HasOne("WorkoutTracker.Domain.Entities.ExerciseEntity", "Exercise")
                        .WithMany("RoutineExercises")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_routine_exercise_exercise_exercise_id");

                    b.HasOne("WorkoutTracker.Domain.Entities.RoutineEntity", "Routine")
                        .WithMany("RoutineExercises")
                        .HasForeignKey("RoutineId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_routine_exercise_routine_routine_id");

                    b.HasOne("WorkoutTracker.Domain.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_routine_exercise_users_user_id");

                    b.Navigation("Exercise");

                    b.Navigation("Routine");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkoutTracker.Domain.Entities.SetEntity", b =>
                {
                    b.HasOne("WorkoutTracker.Domain.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_set_users_user_id");

                    b.HasOne("WorkoutTracker.Domain.Entities.WorkoutSessionExerciseEntity", "WorkoutSessionExerciseEntity")
                        .WithMany("Sets")
                        .HasForeignKey("WorkoutSessionExerciseId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_set_workout_sessions_exercises_workout_session_exercise_id");

                    b.Navigation("User");

                    b.Navigation("WorkoutSessionExerciseEntity");
                });

            modelBuilder.Entity("WorkoutTracker.Domain.Entities.WorkoutSessionEntity", b =>
                {
                    b.HasOne("WorkoutTracker.Domain.Entities.RoutineEntity", "Routine")
                        .WithMany()
                        .HasForeignKey("RoutineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workout_session_routine_routine_id");

                    b.HasOne("WorkoutTracker.Domain.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workout_session_user_user_id");

                    b.Navigation("Routine");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkoutTracker.Domain.Entities.WorkoutSessionExerciseEntity", b =>
                {
                    b.HasOne("WorkoutTracker.Domain.Entities.ExerciseEntity", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workout_session_exercise_exercise_exercise_id");

                    b.HasOne("WorkoutTracker.Domain.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workout_session_exercise_user_user_id");

                    b.HasOne("WorkoutTracker.Domain.Entities.WorkoutSessionEntity", "WorkoutSession")
                        .WithMany("Exercises")
                        .HasForeignKey("WorkoutSessionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_workout_session_exercise_workout_session_workout_session_id");

                    b.Navigation("Exercise");

                    b.Navigation("User");

                    b.Navigation("WorkoutSession");
                });

            modelBuilder.Entity("WorkoutTracker.Domain.Entities.ExerciseEntity", b =>
                {
                    b.Navigation("RoutineExercises");
                });

            modelBuilder.Entity("WorkoutTracker.Domain.Entities.RoutineEntity", b =>
                {
                    b.Navigation("RoutineExercises");
                });

            modelBuilder.Entity("WorkoutTracker.Domain.Entities.WorkoutSessionEntity", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("WorkoutTracker.Domain.Entities.WorkoutSessionExerciseEntity", b =>
                {
                    b.Navigation("Sets");
                });
#pragma warning restore 612, 618
        }
    }
}
